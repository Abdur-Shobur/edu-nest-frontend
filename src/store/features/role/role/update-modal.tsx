'use client';

import { Loader5 } from '@/components/loader';
import { Button } from '@/components/ui/button';
import {
	Dialog,
	DialogContent,
	DialogFooter,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from '@/components/ui/dialog';
import {
	DropdownMenuItem,
	DropdownMenuShortcut,
} from '@/components/ui/dropdown-menu';
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from '@/components/ui/form';
import { Textarea } from '@/components/ui/textarea';
import { alertConfirm, handleValidationError, toaster } from '@/lib';
import { cn } from '@/lib/utils';
import { zodResolver } from '@hookform/resolvers/zod';
import { LoaderCircle, Pen } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { useDevCategoryQuery } from '../dev-category';
import { useRoleUpdateMutation } from './api-slice';
import { subCategoryCheckboxes } from './store';
import { IRole, IRoleStatus } from './type';

// --- Zod Schema ---
const schema = z.object({
	name: z
		.string({ error: 'Name is required' })
		.trim()
		.min(1, 'Name is required'),
	roleKey: z
		.string({ error: 'Role Key is required' })
		.trim()
		.min(1, 'Role Key is required'),
	description: z.string().trim().optional(),
	status: z.enum([
		IRoleStatus.Active,
		IRoleStatus.Inactive,
		IRoleStatus.Trashed,
	]),
	permissionIds: z.array(z.string()).min(1, 'Select at least one permission'),
});

type ZodType = z.infer<typeof schema>;

//  Component
export function UpdateModal({ data }: { data: IRole }) {
	const [open, setOpen] = useState(false);

	return (
		<Dialog open={open} onOpenChange={setOpen}>
			<DropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>
				<DialogTrigger className="flex items-center gap-2 w-full">
					<DropdownMenuShortcut className="ml-0">
						<Pen className="size-4" />
					</DropdownMenuShortcut>
					Edit Role
				</DialogTrigger>
			</DropdownMenuItem>

			<DialogContent
				className={cn(
					'sm:max-w-[1200px] w-full overflow-y-scroll max-h-[90vh]'
				)}
			>
				<DialogHeader>
					<DialogTitle>Update Role</DialogTitle>
				</DialogHeader>

				{open && <FORM setOpen={setOpen} editData={data} />}
			</DialogContent>
		</Dialog>
	);
}

const FORM = ({
	setOpen,
	editData,
}: {
	setOpen: React.Dispatch<React.SetStateAction<boolean>>;
	editData: IRole;
}) => {
	const [mutation, { isLoading }] = useRoleUpdateMutation();
	const { data: permissions, isLoading: isLoadingPermissions } =
		useDevCategoryQuery({
			status: 'active',
			page: 1,
			limit: 'all',
		});

	const form = useForm<ZodType>({
		resolver: zodResolver(schema),
		defaultValues: {
			description: editData.description,
			name: editData.name,
			roleKey: editData.roleKey,
			status: editData.status,
			permissionIds: editData.permissions?.map((p) => p.id.toString()) || [],
		},
	});

	// Watch the name field and auto-update role key
	const watchedName = form.watch('name');

	// Auto-generate role key when name changes
	React.useEffect(() => {
		if (watchedName) {
			const autoGeneratedRoleKey = watchedName
				.toLowerCase()
				.replace(/\s+/g, '_')
				.trim();
			form.setValue('roleKey', autoGeneratedRoleKey);
		}
	}, [watchedName, form]);

	useEffect(() => {
		form.reset({
			description: editData.description,
			name: editData.name,
			roleKey: editData.roleKey,
			status: editData.status,
			permissionIds: editData.permissions?.map((p) => p.id.toString()) || [],
		});
	}, [editData]);

	const onSubmit = async (data: ZodType) => {
		alertConfirm({
			onOk: async () => {
				try {
					const response = await mutation({
						...data,
						id: editData.id,
					}).unwrap();
					if (response.status) {
						toaster({ message: response.message || 'Updated successfully' });
						form.reset();
						setOpen(false);
					} else {
						handleValidationError(response, form.setError);
					}
				} catch (error: any) {
					handleValidationError(error, form.setError);
				}
			},
		});
	};

	if (isLoadingPermissions) {
		return (
			<>
				<Loader5 />
				<Loader5 />
			</>
		);
	}

	return (
		<Form {...form}>
			<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
				<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
					{/* Name */}
					<FormField
						control={form.control}
						name="name"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Name</FormLabel>
								<FormControl>
									<Textarea {...field} placeholder="Type role name..." />
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>

					{/* Description */}
					<FormField
						control={form.control}
						name="description"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Description</FormLabel>
								<FormControl>
									<Textarea {...field} placeholder="Type description..." />
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
				</div>

				{/* Permissions */}
				<FormField
					control={form.control}
					name="permissionIds"
					render={() => (
						<FormItem>
							<FormLabel>Permissions</FormLabel>
							<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
								{permissions?.data.map((permission) => {
									if (permission.subCategories.length <= 0) {
										return false;
									}
									return (
										<div key={permission.id} className="border p-3 rounded-md">
											<h3 className="font-medium mb-2">{permission.name}</h3>
											<div className="space-y-2">
												{subCategoryCheckboxes(permission.subCategories, form)}
											</div>
										</div>
									);
								})}
							</div>
							<FormMessage />
						</FormItem>
					)}
				/>

				<DialogFooter>
					<Button type="submit" disabled={isLoading}>
						{isLoading && (
							<LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
						)}
						{isLoading ? 'Updating...' : 'Update Role'}
					</Button>
				</DialogFooter>
			</form>
		</Form>
	);
};
