'use client';

import { Loader5 } from '@/components/loader';
import { Button } from '@/components/ui/button';
import {
	Dialog,
	DialogContent,
	DialogFooter,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from '@/components/ui/dialog';
import {
	DropdownMenuItem,
	DropdownMenuShortcut,
} from '@/components/ui/dropdown-menu';
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { alertConfirm, handleValidationError, toaster } from '@/lib';
import { cn } from '@/lib/utils';
import { zodResolver } from '@hookform/resolvers/zod';
import { LoaderCircle, Pen } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { useDevCategoryQuery } from '../dev-category';
import { useDevSubCategoryUpdateMutation } from './api-slice';
import { IDevSubCategory, IDevSubCategoryStatus } from './type';

// --- Zod Schema ---
const schema = z.object({
	name: z
		.string({ error: 'Name is required' })
		.trim()
		.min(1, 'Name is required'),
	description: z.string().trim().optional(),
	permissionKey: z
		.string({ error: 'Permission Key is required' })
		.trim()
		.min(1, 'Permission Key is required'),
	status: z.enum([
		IDevSubCategoryStatus.Private,
		IDevSubCategoryStatus.Public,
		IDevSubCategoryStatus.Inactive,
		IDevSubCategoryStatus.Trashed,
	]),
	categoryId: z
		.string({ error: 'Category is required' })
		.min(1, 'Category is required'),
});

type ZodType = z.infer<typeof schema>;

//  Component
export function UpdateModal({ data }: { data: IDevSubCategory }) {
	const [open, setOpen] = useState(false);

	return (
		<Dialog open={open} onOpenChange={setOpen}>
			<DropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>
				<DialogTrigger className="flex items-center gap-2 w-full">
					<DropdownMenuShortcut className="ml-0">
						<Pen className="size-4" />
					</DropdownMenuShortcut>
					Edit Sub Category
				</DialogTrigger>
			</DropdownMenuItem>

			<DialogContent
				className={cn('sm:max-w-[500px] w-full overflow-y-scroll max-h-[90vh]')}
			>
				<DialogHeader>
					<DialogTitle>Update Sub Category</DialogTitle>
				</DialogHeader>

				{open && <FORM setOpen={setOpen} editData={data} />}
			</DialogContent>
		</Dialog>
	);
}

const FORM = ({
	setOpen,
	editData,
}: {
	setOpen: React.Dispatch<React.SetStateAction<boolean>>;
	editData: IDevSubCategory;
}) => {
	const [mutation, { isLoading }] = useDevSubCategoryUpdateMutation();
	const { data: categories, isLoading: isLoadingCategories } =
		useDevCategoryQuery({
			status: 'active',
			page: 1,
			limit: 'all',
		});

	const form = useForm<ZodType>({
		resolver: zodResolver(schema),
		defaultValues: {
			description: editData.description,
			name: editData.name,
			permissionKey: editData.permissionKey,
			status: editData.status,
			categoryId: editData.category.id.toString(),
		},
	});

	// Watch the name field and auto-update permission key
	const watchedName = form.watch('name');

	// Auto-generate permission key when name changes
	React.useEffect(() => {
		if (watchedName) {
			const autoGeneratedPermissionKey = watchedName
				.toLowerCase()
				.replace(/\s+/g, '_')
				.trim();
			form.setValue('permissionKey', autoGeneratedPermissionKey);
		}
	}, [watchedName, form]);

	useEffect(() => {
		form.reset({
			description: editData.description,
			name: editData.name,
			permissionKey: editData.permissionKey,
			status: editData.status,
			categoryId: editData.category.id.toString(),
		});
	}, [editData]);

	const onSubmit = async (data: ZodType) => {
		alertConfirm({
			onOk: async () => {
				try {
					const response = await mutation({
						...data,
						id: editData.id,
					}).unwrap();
					if (response.status) {
						toaster({ message: response.message || 'Updated successfully' });
						form.reset();
						setOpen(false);
					} else {
						handleValidationError(response, form.setError);
					}
				} catch (error: any) {
					handleValidationError(error, form.setError);
				}
			},
		});
	};

	if (isLoadingCategories) {
		return (
			<>
				<Loader5 />
				<Loader5 />
			</>
		);
	}

	return (
		<Form {...form}>
			<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
				{/* Name */}
				<FormField
					control={form.control}
					name="name"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Name</FormLabel>
							<FormControl>
								<Input {...field} placeholder="Type category name..." />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				{/* Permission Key */}
				<FormField
					control={form.control}
					name="permissionKey"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Permission Key</FormLabel>
							<FormControl>
								<Input
									{...field}
									placeholder="Auto-generated from name..."
									readOnly
								/>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				{/* Category */}
				<FormField
					control={form.control}
					name="categoryId"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Category</FormLabel>
							<Select
								onValueChange={(value) => field.onChange(value.toString())}
								defaultValue={field.value.toString()}
							>
								<FormControl>
									<SelectTrigger className="w-full">
										<SelectValue placeholder="Select category" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									{categories?.data.map((category) => (
										<SelectItem
											key={category.id}
											value={category.id.toString()}
										>
											{category.name}
										</SelectItem>
									))}
								</SelectContent>
							</Select>
							<FormMessage />
						</FormItem>
					)}
				/>

				{/* Description */}
				<FormField
					control={form.control}
					name="description"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Description</FormLabel>
							<FormControl>
								<Textarea {...field} placeholder="Type description..." />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				{/* Status */}
				<FormField
					control={form.control}
					name="status"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Status</FormLabel>
							<Select onValueChange={field.onChange} defaultValue={field.value}>
								<FormControl>
									<SelectTrigger className="w-full">
										<SelectValue placeholder="Select status" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									{Object.values(IDevSubCategoryStatus).map((status) => (
										<SelectItem key={status} value={status}>
											{status.charAt(0).toUpperCase() + status.slice(1)}
										</SelectItem>
									))}
								</SelectContent>
							</Select>
							<FormMessage />
						</FormItem>
					)}
				/>

				<DialogFooter>
					<Button type="submit" disabled={isLoading}>
						{isLoading && (
							<LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
						)}
						{isLoading ? 'Updating...' : 'Update Sub Category'}
					</Button>
				</DialogFooter>
			</form>
		</Form>
	);
};
