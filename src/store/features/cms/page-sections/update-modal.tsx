'use client';

import { Loader5 } from '@/components/loader';
import { Button } from '@/components/ui/button';
import {
	Dialog,
	DialogContent,
	DialogFooter,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from '@/components/ui/dialog';
import {
	DropdownMenuItem,
	DropdownMenuShortcut,
} from '@/components/ui/dropdown-menu';
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from '@/components/ui/select';
import { alertConfirm, handleValidationError, toaster } from '@/lib';
import { cn } from '@/lib/utils';
import { zodResolver } from '@hookform/resolvers/zod';
import { LoaderCircle, Pen } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { useCMSListItemsQuery } from '../list-items';
import { useCMSSectionsQuery } from '../sections';
import { useCMSPageSectionsUpdateMutation } from './api-slice';
import {
	ICMSPageIsFor,
	ICMSPageSections,
	ICMSPageSectionsStatus,
} from './type';

// --- Zod Schema ---
const schema = z.object({
	pageSectionsName: z
		.string({ error: 'Page Section Name is required' })
		.trim()
		.min(1, 'Page Section Name is required'),
	pageSectionsKey: z
		.string({ error: 'Page Section Key is required' })
		.trim()
		.min(1, 'Page Section Key is required'),
	pageIsFor: z.nativeEnum(ICMSPageIsFor),
	pageDesignLayout: z
		.string({ error: 'Page Design Layout is required' })
		.trim()
		.min(1, 'Page Design Layout is required'),
	status: z.enum([
		ICMSPageSectionsStatus.Active,
		ICMSPageSectionsStatus.Inactive,
		ICMSPageSectionsStatus.Trashed,
	]),
	sectionId: z.number().min(1, 'Select a section'),
	listItemIds: z.array(z.number()).min(1, 'Select at least one list item'),
	order: z.number().min(0, 'Order must be a positive number').optional(),
});

type ZodType = z.infer<typeof schema>;

//  Component
export function UpdateModal({ data }: { data: ICMSPageSections }) {
	const [open, setOpen] = useState(false);

	return (
		<Dialog open={open} onOpenChange={setOpen}>
			<DropdownMenuItem asChild onSelect={(e) => e.preventDefault()}>
				<DialogTrigger className="flex items-center gap-2 w-full">
					<DropdownMenuShortcut className="ml-0">
						<Pen className="size-4" />
					</DropdownMenuShortcut>
					Edit CMSPageSections
				</DialogTrigger>
			</DropdownMenuItem>

			<DialogContent
				className={cn(
					'sm:max-w-[1200px] w-full overflow-y-scroll max-h-[90vh]'
				)}
			>
				<DialogHeader>
					<DialogTitle>Update CMSPageSections</DialogTitle>
				</DialogHeader>

				{open && <FORM setOpen={setOpen} editData={data} />}
			</DialogContent>
		</Dialog>
	);
}

const FORM = ({
	setOpen,
	editData,
}: {
	setOpen: React.Dispatch<React.SetStateAction<boolean>>;
	editData: ICMSPageSections;
}) => {
	const [mutation, { isLoading }] = useCMSPageSectionsUpdateMutation();
	const { data: sections, isLoading: isLoadingSections } = useCMSSectionsQuery({
		status: 'active',
		page: 1,
		limit: 'all',
	});
	const { data: listItems, isLoading: isLoadingListItems } =
		useCMSListItemsQuery({
			status: 'active',
			page: 1,
			limit: 'all',
		});

	const form = useForm<ZodType>({
		resolver: zodResolver(schema),
		defaultValues: {
			pageSectionsName: editData.pageSectionsName,
			pageSectionsKey: editData.pageSectionsKey,
			pageIsFor: editData.pageIsFor,
			pageDesignLayout: editData.pageDesignLayout,
			status: editData.status,
			sectionId: editData.section?.id || 0,
			listItemIds: editData.listItems?.map((item) => item.id) || [],
			order: editData.order,
		},
	});

	// Watch the name field and auto-update key
	const watchedName = form.watch('pageSectionsName');

	// Auto-generate key when name changes
	React.useEffect(() => {
		if (watchedName) {
			const autoGeneratedKey = watchedName
				.toLowerCase()
				.replace(/\s+/g, '_')
				.trim();
			form.setValue('pageSectionsKey', autoGeneratedKey);
		}
	}, [watchedName, form]);

	useEffect(() => {
		form.reset({
			pageSectionsName: editData.pageSectionsName,
			pageSectionsKey: editData.pageSectionsKey,
			pageIsFor: editData.pageIsFor,
			pageDesignLayout: editData.pageDesignLayout,
			status: editData.status,
			sectionId: editData.section?.id || 0,
			listItemIds: editData.listItems?.map((item) => item.id) || [],
			order: editData.order,
		});
	}, [editData]);

	const onSubmit = async (data: ZodType) => {
		alertConfirm({
			onOk: async () => {
				try {
					const response = await mutation({
						...data,
						id: editData.id,
					}).unwrap();
					if (response.status) {
						toaster({ message: response.message || 'Updated successfully' });
						form.reset();
						setOpen(false);
					} else {
						handleValidationError(response, form.setError);
					}
				} catch (error: any) {
					handleValidationError(error, form.setError);
				}
			},
		});
	};

	if (isLoadingSections || isLoadingListItems) {
		return (
			<>
				<Loader5 />
				<Loader5 />
			</>
		);
	}

	return (
		<Form {...form}>
			<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
				<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
					{/* Page Section Name */}
					<FormField
						control={form.control}
						name="pageSectionsName"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Page Section Name</FormLabel>
								<FormControl>
									<Input {...field} placeholder="Type page section name..." />
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>

					{/* Page Section Key */}
					<FormField
						control={form.control}
						name="pageSectionsKey"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Page Section Key</FormLabel>
								<FormControl>
									<Input {...field} placeholder="Type page section key..." />
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>

					{/* Page Is For */}
					<FormField
						control={form.control}
						name="pageIsFor"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Page Is For</FormLabel>
								<Select
									onValueChange={field.onChange}
									defaultValue={field.value}
								>
									<FormControl>
										<SelectTrigger>
											<SelectValue placeholder="Select page type" />
										</SelectTrigger>
									</FormControl>
									<SelectContent>
										<SelectItem value={ICMSPageIsFor.Home}>Home</SelectItem>
										<SelectItem value={ICMSPageIsFor.About}>About</SelectItem>
										<SelectItem value={ICMSPageIsFor.Contact}>
											Contact
										</SelectItem>
										<SelectItem value={ICMSPageIsFor.Services}>
											Services
										</SelectItem>
									</SelectContent>
								</Select>
								<FormMessage />
							</FormItem>
						)}
					/>

					{/* Page Design Layout */}
					<FormField
						control={form.control}
						name="pageDesignLayout"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Page Design Layout</FormLabel>
								<FormControl>
									<Input {...field} placeholder="Type page design layout..." />
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>

					{/* Section */}
					<FormField
						control={form.control}
						name="sectionId"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Section</FormLabel>
								<Select
									onValueChange={(value) => field.onChange(parseInt(value))}
									value={field.value?.toString()}
								>
									<FormControl>
										<SelectTrigger>
											<SelectValue placeholder="Select a section" />
										</SelectTrigger>
									</FormControl>
									<SelectContent>
										{sections?.data?.map((section) => (
											<SelectItem
												key={section.id}
												value={section.id.toString()}
											>
												{section.title}
											</SelectItem>
										))}
									</SelectContent>
								</Select>
								<FormMessage />
							</FormItem>
						)}
					/>

					{/* Order */}
					<FormField
						control={form.control}
						name="order"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Order</FormLabel>
								<FormControl>
									<Input
										{...field}
										type="number"
										placeholder="Enter order number..."
										onChange={(e) =>
											field.onChange(parseInt(e.target.value) || 0)
										}
									/>
								</FormControl>
								<FormMessage />
							</FormItem>
						)}
					/>
				</div>

				{/* List Items */}
				<FormField
					control={form.control}
					name="listItemIds"
					render={({ field }) => (
						<FormItem>
							<FormLabel>List Items</FormLabel>
							<FormControl>
								<Select
									onValueChange={(value) => {
										const newValue = parseInt(value);
										const currentValues = field.value || [];
										if (currentValues.includes(newValue)) {
											field.onChange(
												currentValues.filter((id) => id !== newValue)
											);
										} else {
											field.onChange([...currentValues, newValue]);
										}
									}}
								>
									<SelectTrigger>
										<SelectValue placeholder="Select list items" />
									</SelectTrigger>
									<SelectContent>
										{listItems?.data?.map((item) => (
											<SelectItem key={item.id} value={item.id.toString()}>
												{item.title}
											</SelectItem>
										))}
									</SelectContent>
								</Select>
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<DialogFooter>
					<Button type="submit" disabled={isLoading}>
						{isLoading && (
							<LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
						)}
						{isLoading ? 'Updating...' : 'Update Page Section'}
					</Button>
				</DialogFooter>
			</form>
		</Form>
	);
};
